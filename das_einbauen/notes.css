/* reasonable to do this for all elements to not have different box-sizes 
calculates border + padding into box size (defined with)
* {
    box-sizing: border-box;
}
*/

/* BUT next is slightly better practice as is also ensure that
if i change the box-sizing property of an element it gets 
properly enherited and not as in the first example something like: 
<div style="box-sizing: content-box"><h1></h1></div>
this here would have a h1 with a property of  box-sizing: border-box; 
still when using the first example!!! but not in the 2nd (here it gets 
properly inherited */
html {
    box-sizing: border-box;
}

*, *:before, *:after {
    box-sizing: inherit;
}

* {
    box-sizing: border-box;
}

body {
    background-color: #1b2127;
    color: #ddd;
}

tr {
    border-bottom: 1px solid #ddd;
}

tr:hover {
    background-color: #d6eeed;
}

.class {
    background-color: aqua;
}

#unique {
    color: aquamarine;
}

img {
    max-width: 100%;
}

/* vw is viewport size, 1 equals 1% of viewport - its responsive */
h1 {
    font-size: 3.5rem;
}

h2 {
    font-size: 3rem;
}

h3 {
    font-size: 2rem;
}

p {
    /* font-size: 1rem; is default/implicit */ 
}

/* always define width + height of all images to prevent flickering when broswer loads images */

/* pseudo classes */
/* order is important a:hover MUST come after a:link and a:visited
   a:active MUST come after a:hover */
/* unvisited link */
a:link {
    color:aqua;
}

a:visited {
    color: aquamarine;
}

a:hover {
    color:blue;
}

a:active {
    color:beige;
}

/* can also combine pseudo classes with classes */

div.highlight:hover {
    background-color: azure;
}

p.first-child-test:first-child {
    color:rebeccapurple;
}

p i.first-child-test:first-child {
    color:rebeccapurple
}

/* with :lang(en) i can define language specific css */
/* :focus if something like a textbox is clicked */

p.firstbig::first-letter {
    font-size: 1.5rem;
}

/* images are transparent if not hovered over: */
img {
    opacity: 0.5;
}

img:hover {
    opacity: 1.0;
}

/* create navbar: */

nav {
    position: -webkit-sticky; /* needed for safari browser support */
    position: sticky;
    top: 0;
}

nav ul {
    list-style-type: none; /* no list points */
    margin: 0;
    padding: 0;
    border: 2px solid #060708;
    background-color: #392853;
    overflow: hidden;  /* overflow clipped to fit navitems */
}

/* li items are block elements by default - 
remove this and therefore remove line breaks before + after 
also possible: float left and <a> as block*/
nav ul li {
    float: left;
}

a.nav-a {
    display: block;
    color: #ddd;
    width: 5rem;
    text-decoration: none; /* no underline */
    text-align: center;
    padding: 0.3rem 0.5rem;
}

a.active {
    background-color: #281c3a;
    cursor: pointer;
}

a.nav-a:hover:not(a.active) {
    color: #ddd;
    background-color: #5a3f83;
}

textarea {
    width: 40vw;
    height: 20vh;
    box-sizing: border-box;
    padding: 0.5rem 0.5rem;
    background-color: #f8f8f8;
    border: 2px solid #ccc;
    border-radius: 5px;
    resize: none;
}

header {
    background-color: #2c3641;
    text-align: center;
    font-size: 4rem;
    padding: 2rem;
    /* margin needs to be set to 0 in body element to stretch it all the way 
    (body element margin is applied after all others cause its "around" all elements */
}

#transitiontest {
    width: 30vw;
    height: 20vh;
    background: #2c3641;
    border-radius: 10px;
    transition: width 1s, height 1.5s; /* applies when property (e.g. width) is changed (e.g. via :hover) */
    /* change behaviour with transition-timing-function */
    /* transition-delay: 0.5s; like youtube does for their vid previous */
}

#transitiontest:hover {
    width: 50vw;
    height: 40vh;
}

#transitiontransformationtest {
    margin-top: 1rem;
    width: 10vw;
    height: 10vh;
    background: #2c3641;
    border-radius: 10px;
    transition: width 1s, height 1.5s, transform 2s; 
}

#transitiontransformationtest:hover {
    width: 30vw;
    height: 30vh;
    transform: rotate(180deg);
}

/* first define keyframe with properties at certain points and then bind it to element */
@keyframes example {
    0% {background-color: #2c3641; left: 0; top: 0;}
    50% {background-color: #244232; left: 10vw; top: 10vh;}
    100% {background-color: #5a3f83; left: 20vw; top: 0;}
}


#animationtest {
    margin-top: 1rem;
    width: 10vw;
    height: 10vw;
    position: relative;
    background-color: #2c3641;
    border-radius: 10px;
    animation-name: example;
    animation-duration: 3s;
    animation-delay: 1s;
    animation-iteration-count: 3; /* also "infinite" possible */
    animation-direction: alternate; /* also reversed direction, etc. possible */
    animation-timing-function: linear; /* ease (slow, fast, slow) is default */
    animation-fill-mode: forwards; /* element keeps properties that are present at the end of the animation (default is that element gets back to normal) */
}

/* .flex-container {
    display: flex;
    flex-wrap: wrap;  makes flex boxes into new line if display is to small --> "wraps" them
    background-color: #2d1a42;
}

">" is child selector (every div directly inside .flex-container)
whereas " " is descendant selector (all divs inside .flex-container)
e.g. 
<div class="flex-container">
    <div>
        This is a CHILD (and therefore also a DESCENDANT)
        <div>This is the child of the child. A DESCENDANT.</div>
    </div>
    <div>This is also a child</div>
</div>

.flex-container > div {
    
} */